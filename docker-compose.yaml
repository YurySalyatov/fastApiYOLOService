version: '3.11'

services:
  frontend:
    image: nginx:alpine
    volumes:
      - ./frontend:/usr/share/nginx/html:cashed
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./shared_volume:/app/shared_volume
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build: ./backend
    environment:
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./shared_volume:/app/shared_volume
      - ./shared_volume/models:/app/shared_volume/models
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  celery_worker:
    build: ./backend
    command: celery -A main.celery worker --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./shared_volume:/app/shared_volume
    networks:
      - app-network
    depends_on:
      - redis
      - backend
    healthcheck:
      test: [ "CMD", "celery", "-A", "main.celery", "inspect", "ping" ]
      interval: 20s
      timeout: 10s
      retries: 5

  integration-tests:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./tests:/app/tests
      - ./shared_volume:/app/shared_volume
    environment:
      - REDIS_URL=redis://redis:6379/0
    command: >
      sh -c "pip install pytest httpx websockets Pillow &&
             pytest tests/integration -v"
    depends_on:
      frontend:
        condition: service_healthy
#      backend:
#        condition: service_healthy
      celery_worker:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

volumes:
  redis_data:

networks:
  app-network:
    driver: bridge